datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Account       Account?
  tags          Tag[]
  posts       Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 

 
model Tag {
  id            Int      @id @default(autoincrement())
  category_name String   @unique
  path          String   @unique 
  userId       String  
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Posts          Post[]
  @@index([userId])
}
model Post{
  id            Int      @id @default(autoincrement())
  thumbnail String       @db.Text
  title     String
  desc      String       @db.Text
  userId    String
  tagId     Int
  tag       Tag    @relation(fields: [tagId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  contents     Content[]
  userSelects UserSelect[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([userId])
}



model Content{
  id            Int      @id @default(autoincrement())
  cupang_link String       @db.Text
  productImage String       @db.Text
  title String
  postId   Int
  Post          Post     @relation(fields: [postId], references: [id])
  commentList CommentList[]
  reiviews ReviewList[]
  briefLists  BriefList[]
  userSelects UserSelect[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([postId])
}

model CommentList{
  id            Int      @id @default(autoincrement())
  text String @db.Text
  contentId Int
  Content          Content     @relation(fields: [contentId], references: [id])
    createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([contentId])
}
model ReviewList{
  id            Int      @id @default(autoincrement())
  text String @db.Text
  contentId Int
  Content          Content     @relation(fields: [contentId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([contentId])
}
model BriefList{
  id            Int      @id @default(autoincrement())
  text String @db.Text
  contentId Int
  Content          Content     @relation(fields: [contentId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([contentId])
}


model UserSelect{
  id Int  @id @default(autoincrement())
  postId Int
  contentId Int
  createdAt     DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  Content   Content  @relation(fields: [contentId], references: [id])
  @@index([contentId])
  @@index([postId])
}